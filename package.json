{
    "name": "brew-services",
    "displayName": "Brew Services",
    "description": "Control Brew services in VS Code",
    "version": "0.2.1",
    "publisher": "beauallison",
    "icon": "icon.png",
    "engines": {
        "vscode": "^1.21.0"
    },
    "categories": [
        "Other"
    ],
    "keywords": [
        "homebrew",
        "brew",
        "services",
        "osx"
    ],
    "activationEvents": [
        "onCommand:startService",
        "onCommand:stopService",
        "onCommand:restartService",
        "onCommand:refreshButton",
        "onView:brewExplorer"
    ],
    "main": "./out/extension",
    "contributes": {
        "commands": [
            {
                "command": "startService",
                "title": "Start Service"
            },
            {
                "command": "stopService",
                "title": "Stop Service"
            },
            {
                "command": "restartService",
                "title": "Restart Service"
            },
            {
                "command": "refreshButton",
                "title": "Refresh",
                "icon": {
                    "light": "resources/refreshLight.svg",
                    "dark": "resources/refreshDark.svg"
                }
            },
            {
                "command": "loadService",
                "title": "Load"
            },
            {
                "command": "unloadService",
                "title": "Unload"
            },
            {
                "command": "reloadService",
                "title": "Reload"
            },
            {
                "command": "viewLog",
                "title": "View Log"
            },
            {
                "command": "viewErrorLog",
                "title": "View Error Log"
            }
        ],
        "menus": {
            "commandPalette": [
                {
                    "command": "startService",
                    "when": "view == brewExplorer && viewItem == serviceItem"
                },
                {
                    "command": "stopService",
                    "when": "view == brewExplorer && viewItem == serviceItem"
                },
                {
                    "command": "restartService",
                    "when": "view == brewExplorer && viewItem == serviceItem"
                },
                {
                    "command": "refreshButton",
                    "when": "view == brewExplorer"
                }
            ],
            "view/item/context": [
                {
                    "command": "startService",
                    "when": "view == brewExplorer && !(viewItem != serviceItemIDLE && viewItem != serviceItemERROR)",
                    "group": "c_startstop"
                },
                {
                    "command": "stopService",
                    "when": "view == brewExplorer && viewItem == serviceItemRUNNING",
                    "group": "c_startstop"
                },
                {
                    "command": "viewLog",
                    "when": "view == brewExplorer && !(viewItem != serviceItemERROR && viewItem != serviceItemIDLE && viewItem != serviceItemRUNNING)",
                    "group": "b_logs"
                },
                {
                    "command": "viewErrorLog",
                    "when": "view == brewExplorer && !(viewItem != serviceItemERROR && viewItem != serviceItemIDLE && viewItem != serviceItemRUNNING)",
                    "group": "b_logs"
                },
                {
                    "command": "loadService",
                    "when": "view == brewExplorer && viewItem == serviceItemUNLOADED",
                    "group": "a_loadunload"
                },
                {
                    "command": "unloadService",
                    "when": "view == brewExplorer && !(viewItem != serviceItemERROR && viewItem != serviceItemIDLE && viewItem != serviceItemRUNNING)",
                    "group": "a_loadunload"
                },
                {
                    "command": "reloadService",
                    "when": "view == brewExplorer && !(viewItem != serviceItemERROR && viewItem != serviceItemIDLE && viewItem != serviceItemRUNNING)",
                    "group": "a_loadunload"
                }
            ],
            "view/title": [
                {
                    "command": "refreshButton",
                    "when": "view == brewExplorer",
                    "group": "navigation"
                }
            ]
        },
        "views": {
            "brewExplorer": [
                {
                    "id": "brewExplorer",
                    "name": "Explorer"
                }
            ]
        },
        "viewsContainers": {
            "activitybar": [
                {
                    "icon": "resources/icon.svg",
                    "id": "brewExplorer",
                    "title": "Launch Agents"
                }
            ]
        }
    },
    "repository": {
        "type": "git",
        "url": "https://github.com/beauallison/homebrew-services-vscode"
    },
    "scripts": {
        "vscode:prepublish": "npm run compile",
        "compile": "tsc -p ./",
        "watch": "tsc -watch -p ./",
        "postinstall": "node ./node_modules/vscode/bin/install",
        "test": "jest --coverage"
    },
    "devDependencies": {
        "@types/jest": "^22.2.2",
        "@types/node": "^10.12.18",
        "@types/expand-tilde": "^2.0.0",
        "jest": "^22.4.3",
        "ts-jest": "^22.4.2",
        "tslint": "^5.8.0",
        "tslint-config-airbnb": "^5.8.0",
        "typescript": "^2.6.1"
    },
    "dependencies": {
        "expand-tilde": "^2.0.2",
        "fast-plist": "^0.1.2",
        "homebrew-services": "0.1.0",
        "vscode": "^1.1.27"
    },
    "jest": {
        "transform": {
            "^.+\\.tsx?$": "ts-jest"
        },
        "testRegex": "(/__tests__/.*|(\\.|/)(test|spec))\\.(jsx?|tsx?)$",
        "modulePathIgnorePatterns": [
            "<rootDir>/out/"
        ],
        "testPathIgnorePatterns": [
            "<rootDir>/out/"
        ],
        "moduleFileExtensions": [
            "ts",
            "tsx",
            "js",
            "jsx",
            "json",
            "node"
        ]
    }
}
